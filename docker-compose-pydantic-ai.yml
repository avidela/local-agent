services:
  pydantic-ai-db:
    image: postgres:15
    container_name: pydantic_ai_db
    environment:
      POSTGRES_DB: pydantic_ai_db
      POSTGRES_USER: pydantic_ai_user
      POSTGRES_PASSWORD: pydantic_ai_password
    ports:
      - "5434:5432"  # Different port to avoid conflict with ADK DB
    volumes:
      - pydantic_ai_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pydantic_ai_user -d pydantic_ai_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  pydantic-ai-backend:
    build:
      context: ./apps/backends/pydantic_ai
      dockerfile: Dockerfile
      target: development
    container_name: pydantic_ai_backend
    environment:
      # Application Settings
      APP_NAME: "PydanticAI Agents Service"
      APP_VERSION: "0.1.0"
      ENVIRONMENT: "development"
      DEBUG: "true"
      HOST: "0.0.0.0"
      PORT: 8000

      # Database Configuration (separate database from ADK)
      DATABASE_URL: "postgresql+asyncpg://pydantic_ai_user:pydantic_ai_password@pydantic-ai-db:5432/pydantic_ai_db"
      DATABASE_ECHO: "false"
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 0

      # Google Vertex AI Configuration (same as ADK)
      GOOGLE_GENAI_USE_VERTEXAI: "TRUE"
      GOOGLE_CLOUD_PROJECT: ds-staff-gen-ai-prd-955b
      GOOGLE_CLOUD_LOCATION: us-central1
      
      # Model Provider API Keys (optional)
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY:-}"

      # Model Settings
      MODEL_DEFAULT_MODEL: "google:gemini-2.0-flash-exp"
      MODEL_DEFAULT_TEMPERATURE: 0.7

      # Authentication Settings
      AUTH_SECRET_KEY: "dev-secret-key-change-in-production"
      AUTH_ALGORITHM: "HS256"
      AUTH_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      AUTH_ADMIN_USERNAME: "admin"
      AUTH_ADMIN_PASSWORD: "admin"

      # Observability Settings (loaded from .env file)
      OBSERVABILITY_LOGFIRE_SERVICE_NAME: "pydantic-ai-agents"
      OBSERVABILITY_LOGFIRE_ENVIRONMENT: "development"
      OBSERVABILITY_ENABLE_TRACING: "true"
      OBSERVABILITY_ENABLE_METRICS: "true"
      OBSERVABILITY_TRACE_SAMPLE_RATE: 1.0

      # CORS Settings (using defaults from settings.py)
      CORS_ALLOW_CREDENTIALS: "true"

      # File Upload Settings
      MAX_FILE_SIZE: 10485760  # 10MB
      # ALLOWED_FILE_TYPES - use defaults from settings.py (avoid JSON parsing issues)

      # Rate Limiting
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60

    ports:
      - "8002:8000"  # Map to 8002 to avoid conflict with other services
    depends_on:
      pydantic-ai-db:
        condition: service_healthy
    volumes:
      - ./apps/backends/pydantic_ai:/app  # Mount source for development
      - /home/user/repos:/repos  # Mount repos directory for access
      - type: bind
        source: ${APPDATA:-~/.config}/gcloud
        target: /root/.config/gcloud
        read_only: true
    env_file:
      - ./apps/backends/pydantic_ai/.env
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
volumes:
  pydantic_ai_postgres_data: