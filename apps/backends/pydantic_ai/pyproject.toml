[project]
name = "pydantic-ai-backend"
version = "0.1.0"
description = "PydanticAI backend for the local agent"
readme = "README.md"
requires-python = ">=3.10"

dependencies = [
    # Core PydanticAI
    "pydantic-ai[anthropic,openai,vertexai]>=0.0.14",
    "pydantic-graph>=0.1.0",
    # Web Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    # Database
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    # Observability
    "opentelemetry-api>=1.27.0",
    "opentelemetry-sdk>=1.27.0",
    "opentelemetry-instrumentation-fastapi>=0.48b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.48b0",
    "opentelemetry-exporter-otlp>=1.27.0",
    "logfire>=0.51.0",
    # Utilities
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",
    "httpx>=0.27.0",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "tenacity>=9.0.0",
    # Development
    "rich>=13.7.0",
    "typer>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0", 
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "inline-snapshot>=0.13.0",
    "dirty-equals>=0.8.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
]

#[build-system]
#requires = ["hatchling"]
#build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
env = [
    "ALLOW_MODEL_REQUESTS=False",
    "PYDANTIC_AI_TEST_MODE=True",
]

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
